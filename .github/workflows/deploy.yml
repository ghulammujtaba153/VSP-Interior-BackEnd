name: Deploy trading_app_backend to AWS

on:
  push:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.ref_name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to EC2
        run: |
          echo "Deploying branch: $BRANCH_NAME"

          # Branch-specific variables
          if [[ "$BRANCH_NAME" == "main" ]]; then
            CONTAINER_NAME="trade-sense-backend"
            IMAGE_NAME="trade-sense-app"
            PORT="5000"
            PROJECT_DIR="Trade-Sense-App-backend-main"
            ENV_FILE=".envs"
          elif [[ "$BRANCH_NAME" == "dev" ]]; then
            CONTAINER_NAME="trade-sense-backend-dev"
            IMAGE_NAME="trade-sense-app-dev"
            PORT="5001"
            PROJECT_DIR="Trade-Sense-App-backend-dev"
            ENV_FILE=".env.dev"
          else
            echo "Unsupported branch: $BRANCH_NAME"
            exit 1
          fi

          echo "Container: $CONTAINER_NAME, Image: $IMAGE_NAME, Port: $PORT, Env: $ENV_FILE"

          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << EOF
            set -e
            cd ~

            # Clone repo if directory doesn't exist
            if [ ! -d "$PROJECT_DIR" ]; then
              git clone -b $BRANCH_NAME https://github.com/ghulammujtaba153/Trade-Sense-App-backend-.git $PROJECT_DIR
            fi

            cd $PROJECT_DIR

            # Pull latest code
            git fetch origin $BRANCH_NAME
            git checkout $BRANCH_NAME
            git pull origin $BRANCH_NAME

            # Remove old container if exists
            docker rm -f $CONTAINER_NAME || true

            # Build Docker image
            docker build -t $IMAGE_NAME .

            echo "Using env file: $ENV_FILE"

            # Run container with branch-specific env and port
            docker run -d \
              --name $CONTAINER_NAME \
              --env-file $ENV_FILE \
              -p 0.0.0.0:$PORT:5000 \
              $IMAGE_NAME
          EOF
