name: Deploy VPS Interior Backend

on:
  push:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to EC2 via SSH
        run: |
          # Extract branch name before SSH
          BRANCH_NAME="${{ github.ref_name }}"
          echo "Deploying branch: $BRANCH_NAME"
          
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << EOF
            set -e

            # Branch-specific variables
            if [ "$BRANCH_NAME" = "main" ]; then
              CONTAINER_NAME="vps-backend-prod"
              IMAGE_NAME="vps-backend-prod"
              PORT="5000"
              PROJECT_DIR="VPS-Interior-BackEnd"
              REPO_BRANCH="main"
              ENV_FILE=".env"
            elif [ "$BRANCH_NAME" = "dev" ]; then
              CONTAINER_NAME="vps-backend-dev"
              IMAGE_NAME="vps-backend-dev"
              PORT="5001"
              PROJECT_DIR="VPS-Interior-BackEnd-Dev"
              REPO_BRANCH="dev"
              ENV_FILE=".env.dev"
            else
              echo "Branch '$BRANCH_NAME' not configured for deployment"
              exit 1
            fi

            echo "Using container: \$CONTAINER_NAME"
            echo "Using port: \$PORT"
            echo "Project directory: \$PROJECT_DIR"
            echo "Environment file: \$ENV_FILE"

            # Clone repo if it doesn't exist
            if [ ! -d "\$PROJECT_DIR" ]; then
              git clone -b \$REPO_BRANCH https://github.com/ghulammujtaba153/VPS-Interior-BackEnd.git \$PROJECT_DIR
            fi

            cd \$PROJECT_DIR

            # Pull latest code
            git fetch origin \$REPO_BRANCH
            git checkout \$REPO_BRANCH
            git reset --hard origin/\$REPO_BRANCH

            # Check if environment file exists in project directory
            echo "Checking for environment file in: \$(pwd)"
            if [ ! -f "\$ENV_FILE" ]; then
              echo "Error: Environment file \$ENV_FILE not found in project directory!"
              echo "Available files in current directory:"
              ls -la
              exit 1
            else
              echo "Found environment file: \$ENV_FILE"
              echo "First few lines of \$ENV_FILE:"
              head -5 "\$ENV_FILE"
            fi

            # Stop and remove any container using the same port
            docker ps --filter "publish=\$PORT" -q | xargs -r docker rm -f

            # Remove old container by name if still present
            docker rm -f \$CONTAINER_NAME 2>/dev/null || true

            # Remove old image to avoid buildup
            docker rmi \$IMAGE_NAME 2>/dev/null || true

            # Build Docker image
            docker build -t \$IMAGE_NAME .

            # Run Docker container with branch-specific .env
            # Use full path to env file to be safe
            docker run -d \\
              --name \$CONTAINER_NAME \\
              --env-file "\$(pwd)/\$ENV_FILE" \\
              -p \$PORT:\$PORT \\
              \$IMAGE_NAME

            # Clean up unused images
            docker image prune -f

            echo "Deployment of \$BRANCH_NAME branch completed successfully!"
            echo "Container \$CONTAINER_NAME is running on port \$PORT"
            
            # Wait a moment and check if container is running
            sleep 5
            docker ps --filter "name=\$CONTAINER_NAME"
          EOF