name: Deploy VPS Interior Backend

on:
  push:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # Use github.ref and extract branch name in SSH
      GITHUB_REF: ${{ github.ref }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to EC2 via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            set -e

            # Extract branch name from github.ref (refs/heads/main -> main)
            BRANCH_NAME=$(basename $GITHUB_REF)
            echo "Deploying branch: $BRANCH_NAME"

            # Branch-specific variables
            if [ "$BRANCH_NAME" = "main" ]; then
              CONTAINER_NAME="vps-backend-prod"
              IMAGE_NAME="vps-backend-prod"
              PORT="5000"
              PROJECT_DIR="VPS-Interior-BackEnd"
              REPO_BRANCH="main"
              ENV_FILE=".env"
            elif [ "$BRANCH_NAME" = "dev" ]; then
              CONTAINER_NAME="vps-backend-dev"
              IMAGE_NAME="vps-backend-dev"
              PORT="5001"
              PROJECT_DIR="VPS-Interior-BackEnd-Dev"
              REPO_BRANCH="dev"
              ENV_FILE=".env.dev"
            else
              echo "Branch '$BRANCH_NAME' not configured for deployment"
              exit 1
            fi

            # Clone repo if it doesn't exist
            if [ ! -d "$PROJECT_DIR" ]; then
              git clone -b $REPO_BRANCH https://github.com/ghulammujtaba153/VPS-Interior-BackEnd.git $PROJECT_DIR
            fi

            cd $PROJECT_DIR

            # Pull latest code
            git fetch origin $REPO_BRANCH
            git checkout $REPO_BRANCH
            git pull origin $REPO_BRANCH

            # Remove any container using the same port
            docker ps --filter "publish=$PORT" -q | xargs -r docker rm -f

            # Remove old container by name if still present
            docker rm -f $CONTAINER_NAME || true

            # Build Docker image
            docker build -t $IMAGE_NAME .

            # Run Docker container with branch-specific .env
            docker run -d \
              --name $CONTAINER_NAME \
              --env-file $ENV_FILE \
              -p $PORT:$PORT \
              $IMAGE_NAME

            echo "Deployment of $BRANCH_NAME branch completed successfully!"
          EOF
